<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org/DTD Mapper 3.0//EN" "./mybatis-3-mapper.dtd" >
<mapper namespace="kr.ezen.jung.dao.JungMemberDAO">
	
	<!-- 중복확인 -->
	
	<!-- id로 얻기 -->
	<select id="selectByUsername" parameterType="string" resultType="JungMemberVO">
		select * from jung_member where username = #{username}
	</select>
	
	<!--  idx으로 얻기 -->
	<select id="selectByIdx" parameterType="hashmap" resultType="JungMemberVO">
		select * from jung_member where idx=#{idx}
	</select>
	
	<!-- 이름과 생년월일로 아이디 찾기 -->
	 <select id="findByNameAndbirthDate" parameterType="hashmap" resultType="JungMemberVO" >
        select * from jung_member where name = #{name} AND birthDate = #{birthDate}
    </select>
    
    <!-- 아이디와 생년월일로 비번 찾기 -->
	 <select id="findByuserNameAndbirthDate" parameterType="hashmap" resultType="JungMemberVO">
        select * from jung_member where username = #{username} AND birthDate = #{birthDate}
    </select>
    
	<!-- 모두 얻기 -->
	<select id="selectAll" resultType="JungMemberVO">
		select * from jung_member order by username
	</select>
	
	<!-- 저장하기 -->
	<insert id="insert" parameterType="JungMemberVO">
		insert into 
			jung_member
		values
			(jung_member_idx_seq.nextval,#{username},#{password},#{name},#{nickName},#{phone},#{stAddress},#{dtAddress},#{role},#{birthDate},#{gender})
	</insert>
	
	<!-- 회원 정보 수정 -->
	<update id="update" parameterType="JungMemberVO">
		update 
			jung_member 
		set 
			username=#{username}, phone=#{phone},email=#{email}, nickName=#{nickName},stAddress=#{stAddress},dtAddress=#{dtAddress},birthDate=#{birthDate},gender=#{gender}
		where 
			idx=#{idx}
	</update>
	
	<!-- 권한수정 -->
	<update id="updateRole" parameterType="JungMemberVO">
		update 
			jung_member 
		set 
			role=#{role}
		where 
			username=#{username}	
	</update>
	
	<!-- 비번수정 -->
	<update id="updatePassword" parameterType="JungMemberVO">
		update 
			jung_member 
		set 
			password=#{password}
		where 
			username=#{username}		
	</update>
	
	<!-- 삭제하기 -->
	<delete id="deleteByIdx" parameterType="int">
		delete from jung_member where idx=#{idx}
	</delete>
	<delete id="deleteByUsername" parameterType="string">
		delete from jung_member where username=#{username}
	</delete>
	
	<!-- 아이디 중복확인을 하기위해 동일한 id개수를 세어주는 쿼리 -->
	<select id="selectCountByUsername" parameterType="string" resultType="int">
		select count(*) from jung_member where username=#{username}
	</select>
	
</mapper>